<?xml version="1.0" encoding="UTF-8"?>
<!--
<configuration>节点：
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false

<root>节点：
    root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    默认是DEBUG。
    可以包含零个或多个元素，标识这个appender将会添加到这个logger。

<springProperty>节点:
    用来定义变量值的标签

<appender>节点:
    appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略
    ConsoleAppender -> 控制台输出
    RollingFileAppender -> 文件输出

<encoder>节点表示对日志进行编码:
    %d{yyyy-MM-dd HH:mm:ss}——日志输出时间
    %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
    %-5level——日志级别，并且使用5个字符靠左对齐
    %logger{36}——日志输出者的名字
    %msg——日志消息
    %n——平台的换行符

<logger>节点:
    <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    <logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。
    name:用来指定受此logger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
    additivity:是否向上级logger传递打印信息。默认是true。
-->
<configuration scan="false" scanPeriod="5 minutes" debug="false">
    <springProperty scop="context" name="LOGGING_FILE_HOME" source="logging.file.home"
                    defaultValue="../logs/"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}[%X{EagleEye-TraceID}][%-5level][%thread] --- [%logger{18}]%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="DEFAULT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_FILE_HOME}default.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_FILE_HOME}default.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}[%X{EagleEye-TraceID}][%-5level][%thread] --- [%logger{18}]%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="SYSTEM_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_FILE_HOME}system.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_FILE_HOME}system.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}[%X{EagleEye-TraceID}][%-5level][%thread] --- [%logger{18}]%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="ERROR_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_FILE_HOME}error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_FILE_HOME}error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}[%X{EagleEye-TraceID}][%-5level][%thread] --- [%logger{18}]%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="RPC_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGGING_FILE_HOME}rpc.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_FILE_HOME}rpc.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>7</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}[%X{EagleEye-TraceID}][%-5level][%thread] --- [%logger{18}]%msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 异步打印日志 -->
    <appender name="ASYNC_LOG_FILE" class="ch.qos.logback.classic.AsyncAppender" >
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <neverBlock>true</neverBlock>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="DEFAULT_FILE" />
    </appender>

    <logger name="SYSTEM_LOG" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="SYSTEM_LOG_FILE"/>
    </logger>

    <logger name="ERROR_LOG" additivity="false">
        <level value="ERROR"/>
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ERROR_LOG_FILE"/>
    </logger>

    <logger name="RPC_LOG" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="RPC_LOG_FILE"/>
    </logger>

    <logger name="ASYNC_LOG" additivity="false">
        <level value="INFO"/>
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="ASYNC_LOG_FILE"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="DEFAULT_FILE"/>
    </root>
</configuration>